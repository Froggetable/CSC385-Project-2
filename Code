#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define NUM_PHILOSOPHERS 5 //Number of philosphers

sem_t semaphore; //Semaphores to prevent simultaneous access
pthread_mutex_t forks[NUM_PHILOSOPHERS]; //Mutex to protect fork count


//Function to simulate philosophers talking and eating
void* philosopher_function(void* arg) {
    int id = *(int*)arg; //Assigns philosopher id
    int left_fork = id; //Left fork access
    int right_fork = (id + 1) % NUM_PHILOSOPHERS; //Right fork access
    
    //Continues to run until the program is stopped
    while (1) {
        
        printf("Philosopher %d is talking.\n", id); //Philosopher talks for randomized time (1-5 seconds)
        sleep(rand() % 5 + 1); //Randomized 1-5 seconds
        printf("Philosopher %d begins to eat.\n", id); //Philosopher starts to pick up forks
        
        //Pick up designated fork & lock fork count (Resource hierarchy)
        if (left_fork < right_fork) { //If left fork has lower value
            pthread_mutex_lock(&forks[left_fork]); //Picks up left fork
            pthread_mutex_lock(&forks[right_fork]); //Picks up right fork
        } else { //If the right fork has a lower value
            pthread_mutex_lock(&forks[right_fork]); //Pick up right fork
            pthread_mutex_lock(&forks[left_fork]); //Pick up left fork
        }
        
        //Eat for randomized time
        sleep(rand() % 5 + 1); //Randomized 1-5 seconds
        printf("Philosopher %d finishes eating.\n", id); //Print when finished

         //Returns both forks and resumes talking
        pthread_mutex_unlock(&forks[left_fork]);
        pthread_mutex_unlock(&forks[right_fork]);

        //Signal semaphore to allow access
        sem_post(&semaphore);
        }
    return NULL;
}


int main() {
    //Creates and runs threads separately for philosophers
    pthread_t philosophers[NUM_PHILOSOPHERS];
    int ids[NUM_PHILOSOPHERS];
    
    //Initialize mutexes for the forks
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_mutex_init(&forks[i], NULL);
    }
    
    //Initialize semaphore for philosopher access
    sem_init(&semaphore, 0, NUM_PHILOSOPHERS - 1);

    //Create pthreads for philosophers
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        ids[i] = i;
        pthread_create(&philosophers[i], NULL, philosopher_function, &ids[i]);
    }
    
    //Join threads
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_join(philosophers[i], NULL);
    }
    
    //Destroy semaphores and mutex
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_mutex_destroy(&forks[i]);
    }
    sem_destroy(&semaphore);

    return 0;
}
